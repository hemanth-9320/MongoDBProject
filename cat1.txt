//sieve

import java.util.*;

public class Main{
    public static void Sieve(int limit){
        boolean[] prime = new boolean[limit + 1];
        for (int i=2; i<=limit; i++){
            prime[i] = true;
        }
        
        for (int p=2; p*p <= limit; p++){
            if(prime[p]==true){
                for (int j=p*p; j<=limit; j+=p){
                    prime[j] = false;
                }
            }
        }
        
        for (int p=2; p<=limit; p++){
            if (prime[p]==true){
                System.out.println(p + " ");
            }
        }
    }
    
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int lim = sc.nextInt();
        Sieve(lim);
    }
}


//segented sieve

import java.util.*;

public class Segmented {
    public static void SegSieve(int l, int h) {
        boolean prime[] = new boolean[h - l + 1];
        int limit = (int) Math.sqrt(h) + 1;
        boolean basePrimes[] = new boolean[limit + 1];
        
        for (int i = 2; i <= limit; i++) {
            if (!basePrimes[i]) {
                for (int j = i * i; j <= limit; j += i) {
                    basePrimes[j] = true;
                }
                
                int sm = Math.max(i * i, (l + i - 1) / i * i);
                for (int j = sm; j <= h; j += i) {
                    prime[j - l] = true;
                }
            }
        }
        
        for (int i = l; i <= h; i++) {
            if (!prime[i - l] && i > 1) {
                System.out.print(i + " ");
            }
        }
        System.out.println();
    }

    public static void main(String[] args) {
        SegSieve(10, 30);
    }
}

//euler phi

import java.util.*;

public class Main{
    public static int Euler(int limit){
        int result = limit;
        for(int p = 2; p*p <= limit; p++){
            if(limit%p==0){
                while(limit%p==0){
                    limit/=p;
                }
                result -= result/p;
            }
        }
        
        if(limit>1){
            result -= result/limit;
        }
        return result;
    }
    
    public static void main(String[] args){
        Scanner sc = new Scanner(System.in);
        int lim = sc.nextInt();
        int phi_lim = Euler(lim);
        System.out.println("phi(" + lim + ") = " + phi_lim);
    }
}

//strobogrammatic

import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
public class Strobo {
    static boolean isStrobogrammatic(String num) {
    Map<Character, Character> map = new HashMap<Character, Character>();
    map.put('6', '9');
    map.put('9', '6');
    map.put('0', '0');
    map.put('1', '1');  
    map.put('8', '8');
    int l = 0, r = num.length() - 1;
    while (l <= r) {
        if (!map.containsKey(num.charAt(l))) return false;
        if (map.get(num.charAt(l)) != num.charAt(r))
            return false;
        l++;
        r--;
    }
    return true;
    }
    
    public static void main(String args[])
    {
    Scanner sc =new Scanner(System.in);
    System.out.print("Give num :");
    String n= sc.next();
    System.out.println(isStrobogrammatic(n));
    }
}

//ipl match run rate
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int totalBalls = sc.nextInt();
        int totalRuns = sc.nextInt();
        int currentRuns = sc.nextInt();
        int ballsBowled = sc.nextInt();

        float totalOvers = totalBalls / 6.0f;
        float finishedOvers = ballsBowled / 6 + (ballsBowled % 6) * 0.1f;
        float currentRunRate = currentRuns / finishedOvers;
        float totalRunRate = totalRuns / totalOvers;

        System.out.println(totalOvers);
        System.out.println(finishedOvers);
        System.out.println(currentRunRate);
        System.out.println(totalRunRate);

        if (currentRunRate > totalRunRate) {
            System.out.println("Eligible to Win");
        } else {
            System.out.println("Not Eligible to Win");
        }
    }
}

//kaprekar
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int k = sc.nextInt();

        int square = k * k;
        String squareStr = String.valueOf(square);
        int len = squareStr.length();
        String leftPart = squareStr.substring(0, len / 2);
        String rightPart = squareStr.substring(len / 2);

        int left = (leftPart.isEmpty()) ? 0 : Integer.parseInt(leftPart);
        int right = Integer.parseInt(rightPart);

        if (left + right == k) {
            System.out.println("Kaprekar Number");
        } else {
            System.out.println("Not a Kaprekar Number");
        }
    }
}

//hollow square pattern 
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0 || i == n - 1 || j == 0 || j == n - 1) {
                    System.out.print("*");
                } else {
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }
}


//pirate gold sharing
import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int totalGold = sc.nextInt();
        int benSharePercent = sc.nextInt();
        int blackbeardSharePercent = sc.nextInt();

        int benShare = (totalGold * benSharePercent) / 100;
        int remainingGold = totalGold - benShare;

        int blackbeardShare = (remainingGold * blackbeardSharePercent) / 100;
        remainingGold -= blackbeardShare;

        int otherPiratesShare = remainingGold / 3;

        System.out.println(benShare);
        System.out.println(blackbeardShare);
        System.out.println(otherPiratesShare);
    }
}


//electricity bill calc

import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int units = sc.nextInt();
        double bill = 0;

        if (units <= 200) {
            bill = units * 0.5;
        } else if (units <= 400) {
            bill = (units * 0.65) + 100;
        } else if (units <= 600) {
            bill = (units * 0.80) + 200;
        } else {
            bill = (units * 1.25) + 425;
        }

        System.out.println("Rs." + (int)bill);
    }
}

//student details

import java.util.Scanner;

public class Solution {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String name = sc.next();
        int age = sc.nextInt();
        float cgpa = sc.nextFloat();
        char grade = sc.next().charAt(0);

        System.out.printf("Name: %s\n", name);
        System.out.printf("Age: %d\n", age);
        System.out.printf("CGPA: %.2f\n", cgpa);
        System.out.printf("Grade: %c\n", grade);
    }
}


BSTS301P
1)CRT
import java.util.*;
class CRT{
  static int CRT(int a[], int m[], int n, int p){
    int x = 0;
    
    for(int i = 0; i<n; i++){
      
      int M = p/m[i], y = 0; //
      
      for(int j=0; j<m[i]; j++){
        if((M*j)%m[i]==1){
          y = j; break;
        }
      }
      
      x = x + a[i]*M*y;
    }
    
    return x%p; 
  }
  public static void main(String args[]){
    Scanner sc = new Scanner(System.in);
    
    System.out.println("Enter the number of congruence relations: ");
    int size = sc.nextInt();
    
    System.out.println("Enter the values of a: ");
    int a[] = new int[size];
    for(int i=0; i<size; i++)
      a[i] = sc.nextInt();
    
    System.out.println("Enter the values of m: ");
    int m[] = new int[size], p = 1;
    for(int i=0; i<size; i++){
      m[i] = sc.nextInt();
      p = p*m[i]; // p = m1*m2*...*mn
    } 

    System.out.println("The solution is "+CRT(a,m,size,p));
  }
}

-------------------------------------------------------------------------------------------------------------------------------
2)TOGGLE

import java.util.Scanner;

public class Toggle {
public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
       boolean[] b = new boolean[n + 1];
        
        
        for (int i = 1; i <= n; i++) {
            for (int j = i; j <= n; j += i) {
                if(b[j] ==false) 
                {
                    b[j] =true;
                }
                else
                b[j] =false;
            }
        }

        
        for (int i = 1; i <= n; i++) {
            if (b[i]) {
                openCount++;
            } else {
                closedCount++;
            }
        }
        for (int i = 1; i <= n; i++) {
            System.out.print(b[i]+ "  ");
           
}
 
            
        // Output the results
        System.out.println("No Of Doors open: " + openCount);
        System.out.println("No Of Doors closed: " + closedCount);
    }
}
----------------------------------------------------------------------------------------------------------------------

3)EULER'S

import java.io.*;
class Euler {
static int gcd(int a, int b){
        if (b == 0)
            return a;
        return gcd(b, a%b);}
static int phi(int n){

        int result = 0;
        for (int i = 1; i < n; i++)
            if (gcd(n,i) == 1)
                result++;
        return result;}
public static void main(String[] args){
Scanner sc = new Scanner(System.in);
int n = sc.nextInt();
for(i=0;i<n;i++)
System.out.println(phi(i));
    }
}
------------------------------------------------------------------------------
4)ALICE APPLE

import java.util.*;
public class AliceAppleTree {
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int apple=sc.nextInt();
        int cnt=0,sum=0;
        while(sum<apple){
            cnt++;
            sum+=(12*cnt*cnt);
              
        }
        System.out.println((8*(cnt)));
    }
}
--------------------------------------------------------------
5)SIMPLE SIEVE

public class SieveMain {
    public static void simpleSieve(int limit) {
              boolean[] prime = new boolean[limit + 1];
        for (int i = 2; i <= limit; i++) {
            prime[i] = true;
        }
    for (int p = 2; p * p <= limit; p++) {
         if (prime[p] == true) {
       for (int i = p * p; i <= limit; i += p) {
prime[i] = false;
                }
            }
        }
    
        // Print all prime numbers
        for (int p = 2; p <= limit; p++) {
            if (prime[p] == true) {
                System.out.print(p + " ");
            }
        }
    }    
    public static void main(String[] args) {

    Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
      simpleSieve(n);     
    }    
}



--------------------------------------------------------------------------------------------------------------------
6)segmented sieve


import java.util.*;
public class Main {
static void SegSieve(int l,int h)
{

 boolean prime[] = new boolean[h + 1];

for (int p = 2; p * p <= h; p++) {
int sm=(l/p)*p;
if (sm <l)
 {
 sm=sm+p;
 }
for (int i = sm; i <= h; i += p)
 prime[i] = true;
}

 for (int i = l; i <= h; i++) 
{
if (prime[i] == false)
System.out.print(i + " ");
}}
 public static void main(String[] args)
{
Scanner sc = new Scanner(System.in);
      int n = sc.nextInt();
 int m = sc.nextInt();


SegSieve(n,m );
 }  
}
----------------------------------------------------------------------------------------------------------------------------------------------
7)Strobogrammatic number


import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;
public class Strobo {
      static boolean isStrobogrammatic(String num) {
    Map<Character, Character> map = new HashMap<Character, Character>();
     map.put('6', '9');
     map.put('9', '6');
     map.put('0', '0');
     map.put('1', '1');
     map.put('8', '8');
     int l = 0, r = num.length() - 1;
     while (l <= r) {
         if (!map.containsKey(num.charAt(l))) return false;
         if (map.get(num.charAt(l)) != num.charAt(r))
             return false;
         l++;
         r--;
     }
     return true;}
 
public static void main(String args[])
 {
    Scanner sc =new Scanner(System.in);
  System.out.print("Give num :");
    String n= sc.next();
    System.out.println(isStrobogrammatic(n));
    
 }  
}
----------------------------------------------------------------------

print n digit Strobogrammatic number
import java.util.*;

class Main {

  static ArrayList<String> numdef(int n, int length) {
    ArrayList<String> result = new ArrayList<String>();
    if (n == 0){
      result.add("");
      return result;
    }
    if (n == 1) {
      result.add("1");
      result.add("0");
      result.add("8");
      return result;
    }

    ArrayList<String> middles = numdef(n - 2, length);

    for (String middle : middles) {
      if (n != length)
        result.add("0" + middle + "0");

      result.add("8" + middle + "8");
      result.add("1" + middle + "1");
      result.add("9" + middle + "6");
      result.add("6" + middle + "9");
    }

    return result;
  }


  static ArrayList<String> strobogrammatic_num(int n) {
    ArrayList<String> result = numdef(n, n);
    return result;
  }
  
  public static void main(String[] args) {
    Scanner in=new Scanner (System.in);
    int n=in.nextInt();
    for (String num : strobogrammatic_num(n))
      System.out.println(num + " ");
  }
}



















